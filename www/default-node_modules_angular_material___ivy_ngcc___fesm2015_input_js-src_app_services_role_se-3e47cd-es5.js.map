{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js","webpack:///src/app/services/role.service.ts"],"names":["listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","EMPTY","element","coerceElement","info","get","subject","result","Subject","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","Platform","NgZone","ngDevMode","Injectable","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","EventEmitter","monitor","subscribe","emit","CdkAutofill_Factory","ɵdir","selectors","outputs","ElementRef","propDecorators","Output","Directive","selector","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_isViewInited","_document","_textareaElement","nativeElement","_measuringClass","FIREFOX","_minRows","value","coerceNumberProperty","_setMinHeight","_maxRows","_setMaxHeight","coerceBooleanProperty","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","_cacheTextareaPlaceholderHeight","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","window","_getWindow","fromEvent","pipe","auditTime","takeUntil","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","scrollHeight","_measureScrollHeight","force","_cacheTextareaLineHeight","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","doc","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","activeElement","setSelectionRange","CdkTextareaAutosize_Factory","DOCUMENT","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","decorators","Optional","Inject","Input","HostListener","host","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵinj","imports","PlatformModule","NgModule","declarations","exports","ngJitMode","MatTextareaAutosize","ɵMatTextareaAutosize_BaseFactory","MatTextareaAutosize_Factory","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","features","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","mixinErrorState","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatInput","inputValueAccessor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","getSupportedInputTypes","has","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","el","_isServer","_isNativeSelect","_isTextarea","_isInFormField","multiple","disabled","_id","_validateType","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","options","focus","isFocused","readonly","_a","_b","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","validity","badInput","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","ids","length","join","MatInput_Factory","MAT_FORM_FIELD","hostVars","MatInput_HostBindings","MatInput_focus_HostBindingHandler","_focusChanged","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","required","errorState","errorStateMatcher","userAriaDescribedBy","provide","MatFormFieldControl","useExisting","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","MatFormField","providers","MatInputModule","MatInputModule_Factory","MatFormFieldModule","MatCommonModule","RoleService","http","URL","URL_API","permits","post","API"],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_input_js-src_app_services_role_se-3e47cd-es5.js","sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = i0.ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n        this._measuringClass = _platform.FIREFOX ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() { return this._textareaElement.placeholder; }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        this._textareaElement.placeholder = value;\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        this._textareaElement.classList.add(this._measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = this._textareaElement.scrollHeight - 4;\n        this._textareaElement.classList.remove(this._measuringClass);\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    placeholder: [{ type: Input }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], placeholder: [{\n            type: Input\n        }], \n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); };\nTextFieldModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = /*@__PURE__*/ function () { let ɵMatTextareaAutosize_BaseFactory; return function MatTextareaAutosize_Factory(t) { return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize); }; }();\nMatTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    const el = event.target;\n                    // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n                    // indicate different things. If the value is 0, it means that the caret is at the start\n                    // of the input, whereas a value of `null` means that the input doesn't support\n                    // manipulating the selection range. Inputs that don't support setting the selection range\n                    // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n                    // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n                    if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 9, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    // Only mark the input as invalid for assistive technology if it has a value since the\n                    // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                    '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                    '[attr.aria-required]': 'required'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = function MatInputModule_Factory(t) { return new (t || MatInputModule)(); };\nMatInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n            MatCommonModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule,\n        MatCommonModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { API } from '../utils/requests/api';\nimport { Role, PermitApproved } from '../models/models';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RoleService extends API<Role>{\n\n    protected URL = `${this.URL_API}users/roles/`;\n\n    constructor(\n        protected http: HttpClient\n    ) {\n        super(http);\n    }\n\n    assingPermits(id: string, permits: PermitApproved[]): Observable<Role> {\n        return this.http.post<Role>(`${URL}${id}/canApproven`, permits);\n    }\n}\n"]}